// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: model/model.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// now , tells the API,which function can be call
	AddSubmission(ctx context.Context, in *StudentData, opts ...grpc.CallOption) (*Response, error)
	GetSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentData, error)
	GetAllSubmissionByIds(ctx context.Context, in *StudentIdArray, opts ...grpc.CallOption) (*StudentDataArray, error)
	GetAllSubmissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StudentDataArray, error)
	UpdateSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentData, error)
	DeleteSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Response, error)
	GetUrlRequestCounter(ctx context.Context, in *Url, opts ...grpc.CallOption) (*UrlCnt, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) AddSubmission(ctx context.Context, in *StudentData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.API/AddSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentData, error) {
	out := new(StudentData)
	err := c.cc.Invoke(ctx, "/model.API/GetSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllSubmissionByIds(ctx context.Context, in *StudentIdArray, opts ...grpc.CallOption) (*StudentDataArray, error) {
	out := new(StudentDataArray)
	err := c.cc.Invoke(ctx, "/model.API/GetAllSubmissionByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllSubmissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StudentDataArray, error) {
	out := new(StudentDataArray)
	err := c.cc.Invoke(ctx, "/model.API/GetAllSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentData, error) {
	out := new(StudentData)
	err := c.cc.Invoke(ctx, "/model.API/UpdateSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteSubmissionById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.API/DeleteSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUrlRequestCounter(ctx context.Context, in *Url, opts ...grpc.CallOption) (*UrlCnt, error) {
	out := new(UrlCnt)
	err := c.cc.Invoke(ctx, "/model.API/GetUrlRequestCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// now , tells the API,which function can be call
	AddSubmission(context.Context, *StudentData) (*Response, error)
	GetSubmissionById(context.Context, *StudentId) (*StudentData, error)
	GetAllSubmissionByIds(context.Context, *StudentIdArray) (*StudentDataArray, error)
	GetAllSubmissions(context.Context, *Empty) (*StudentDataArray, error)
	UpdateSubmissionById(context.Context, *StudentId) (*StudentData, error)
	DeleteSubmissionById(context.Context, *StudentId) (*Response, error)
	GetUrlRequestCounter(context.Context, *Url) (*UrlCnt, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) AddSubmission(context.Context, *StudentData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubmission not implemented")
}
func (UnimplementedAPIServer) GetSubmissionById(context.Context, *StudentId) (*StudentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionById not implemented")
}
func (UnimplementedAPIServer) GetAllSubmissionByIds(context.Context, *StudentIdArray) (*StudentDataArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubmissionByIds not implemented")
}
func (UnimplementedAPIServer) GetAllSubmissions(context.Context, *Empty) (*StudentDataArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubmissions not implemented")
}
func (UnimplementedAPIServer) UpdateSubmissionById(context.Context, *StudentId) (*StudentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmissionById not implemented")
}
func (UnimplementedAPIServer) DeleteSubmissionById(context.Context, *StudentId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubmissionById not implemented")
}
func (UnimplementedAPIServer) GetUrlRequestCounter(context.Context, *Url) (*UrlCnt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlRequestCounter not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_AddSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/AddSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddSubmission(ctx, req.(*StudentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/GetSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetSubmissionById(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllSubmissionByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIdArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllSubmissionByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/GetAllSubmissionByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllSubmissionByIds(ctx, req.(*StudentIdArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/GetAllSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllSubmissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/UpdateSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateSubmissionById(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/DeleteSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteSubmissionById(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUrlRequestCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUrlRequestCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.API/GetUrlRequestCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUrlRequestCounter(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubmission",
			Handler:    _API_AddSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionById",
			Handler:    _API_GetSubmissionById_Handler,
		},
		{
			MethodName: "GetAllSubmissionByIds",
			Handler:    _API_GetAllSubmissionByIds_Handler,
		},
		{
			MethodName: "GetAllSubmissions",
			Handler:    _API_GetAllSubmissions_Handler,
		},
		{
			MethodName: "UpdateSubmissionById",
			Handler:    _API_UpdateSubmissionById_Handler,
		},
		{
			MethodName: "DeleteSubmissionById",
			Handler:    _API_DeleteSubmissionById_Handler,
		},
		{
			MethodName: "GetUrlRequestCounter",
			Handler:    _API_GetUrlRequestCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/model.proto",
}
